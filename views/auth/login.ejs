<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="Content-Security-Policy" content="default-src 'self' https: 'unsafe-inline' 'unsafe-eval'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.gstatic.com https://*.firebaseapp.com https://*.googleapis.com https://apis.google.com https://accounts.google.com https://*.firebaseio.com; script-src-elem 'self' 'unsafe-inline' https://www.gstatic.com https://*.firebaseapp.com https://*.googleapis.com https://apis.google.com https://accounts.google.com https://*.firebaseio.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://www.gstatic.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' https: data: blob: https://*.googleapis.com https://*.gstatic.com; connect-src 'self' https://*.firebaseio.com https://*.googleapis.com https://*.firebaseapp.com https://apis.google.com https://accounts.google.com; frame-src 'self' https://*.firebaseapp.com https://*.googleapis.com https://apis.google.com https://accounts.google.com https://*.firebaseio.com https://*.google.com;">
    <title>Login</title>
    <link rel="stylesheet" href="/styles/main.css">
    <link rel="stylesheet" href="/styles/auth.css">
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/10.7.1/firebase-auth-compat.js"></script>
</head>
<body>
    <div class="container">
        <div class="auth-container">
            <h2>Login to NCBI Tools</h2>
            <h3>You need to login before accessing NCBI tools</h3>
            <div id="loginStatus"></div>
            <button id="googleSignIn" class="google-btn">
                <img src="https://www.gstatic.com/firebasejs/ui/2.0.0/images/auth/google.svg" alt="Google">
                Sign in with Google
            </button>
            <p class="auth-link">Don't have an account? <a href="/auth/signup">Sign up</a></p>
            <div id="loadingIndicator" style="display: none;">
                <i class="fa-spinner"></i> Signing in...
            </div>
            <div id="errorMessage" class="error-message"></div>
            <div id="debugInfo" style="display: none; margin-top: 20px; padding: 10px; background: #f5f5f5; border-radius: 4px;"></div>
        </div>
    </div>

    <script>
        // Initialize Firebase
        async function initializeFirebase() {
            try {
                const response = await fetch('/api/firebase-config');
                if (!response.ok) {
                    throw new Error('Failed to fetch Firebase config');
                }
                const firebaseConfig = await response.json();
                
                // Log Firebase config (without sensitive data)
                console.log('Firebase config loaded:', {
                    authDomain: firebaseConfig.authDomain,
                    projectId: firebaseConfig.projectId,
                    hasApiKey: !!firebaseConfig.apiKey,
                    hasDatabaseUrl: !!firebaseConfig.databaseURL,
                    hasStorageBucket: !!firebaseConfig.storageBucket,
                    hasMessagingSenderId: !!firebaseConfig.messagingSenderId,
                    hasAppId: !!firebaseConfig.appId
                });
                
                // Validate required config fields
                const requiredFields = ['apiKey', 'authDomain', 'projectId', 'databaseURL', 'storageBucket', 'messagingSenderId', 'appId'];
                const missingFields = requiredFields.filter(field => !firebaseConfig[field]);
                if (missingFields.length > 0) {
                    throw new Error(`Missing required Firebase config fields: ${missingFields.join(', ')}`);
                }
                
                if (!firebase.apps.length) {
                    firebase.initializeApp(firebaseConfig);
                    console.log('Firebase initialized');
                }
                
                const auth = firebase.auth();
                const signInBtn = document.getElementById('googleSignIn');
                const loading = document.getElementById('loadingIndicator');
                const errorMessage = document.getElementById('errorMessage');
                const debugInfo = document.getElementById('debugInfo');

                // Handle successful authentication
                async function handleAuthSuccess(user) {
                    try {
                        loading.style.display = 'block';
                        errorMessage.style.display = 'none';
                        debugInfo.textContent = `User authenticated: ${user.email}`;
                        debugInfo.style.display = 'block';

                        // Force token refresh
                        const token = await user.getIdToken(true);
                        console.log('Got fresh token');

                        const response = await fetch('/auth/google-signin', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                token,
                                userData: {
                                    name: user.displayName,
                                    email: user.email,
                                    photo: user.photoURL,
                                    uid: user.uid
                                }
                            }),
                            credentials: 'include'
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            throw new Error(errorData.error || `Server responded with status: ${response.status}`);
                        }

                        const data = await response.json();
                        console.log('Server response:', data);

                        if (data.success) {
                            window.location.href = '/auth/welcome';
                        } else {
                            throw new Error(data.error || 'Authentication failed');
                        }
                    } catch (error) {
                        console.error('Authentication error:', error);
                        errorMessage.textContent = `Authentication error: ${error.message}`;
                        errorMessage.style.display = 'block';
                        debugInfo.textContent = `Error details: ${error.message}`;
                        debugInfo.style.display = 'block';
                    } finally {
                        loading.style.display = 'none';
                    }
                }

                // Handle sign-in button click
                signInBtn.addEventListener('click', async () => {
                    try {
                        signInBtn.disabled = true;
                        loading.style.display = 'block';
                        errorMessage.style.display = 'none';
                        debugInfo.textContent = 'Starting sign-in process...';
                        debugInfo.style.display = 'block';

                        // Clear all existing auth state and storage
                        if (firebase.auth().currentUser) {
                            await firebase.auth().signOut();
                        }
                        sessionStorage.clear();
                        localStorage.clear();
                        debugInfo.textContent += '\nCleared existing auth state and storage';

                        const provider = new firebase.auth.GoogleAuthProvider();
                        provider.setCustomParameters({
                            prompt: 'select_account',
                            access_type: 'offline',
                            cookie_policy: 'single_host_origin'
                        });

                        debugInfo.textContent += '\nAttempting to open popup...';
                        
                        // Attempt the sign-in with a timeout
                        const popupResult = await Promise.race([
                            auth.signInWithPopup(provider),
                            new Promise((_, reject) => 
                                setTimeout(() => reject(new Error('Popup communication timeout')), 120000)
                            )
                        ]);
                        
                        debugInfo.textContent += '\nPopup authentication completed';
                        
                        if (popupResult.user) {
                            debugInfo.textContent += '\nProcessing authentication...';
                            await handleAuthSuccess(popupResult.user);
                        }
                    } catch (error) {
                        console.error('Login error:', error);
                        debugInfo.textContent += `\nError occurred: ${error.code || 'unknown'}`;
                        
                        let errorMsg;
                        switch (error.code) {
                            case 'auth/popup-closed-by-user':
                                // Check if we actually have a user despite the error
                                const currentUser = firebase.auth().currentUser;
                                if (currentUser) {
                                    debugInfo.textContent += '\nUser authenticated despite popup error';
                                    await handleAuthSuccess(currentUser);
                                    return;
                                }
                                errorMsg = 'Authentication was interrupted. Please try again.';
                                break;
                            case 'auth/network-request-failed':
                                errorMsg = 'Network error during authentication. Please check your connection.';
                                break;
                            case 'auth/unauthorized-domain':
                                errorMsg = 'Authentication domain not authorized. Please contact support.';
                                break;
                            default:
                                errorMsg = `Authentication error: ${error.message}`;
                        }
                        
                        errorMessage.textContent = errorMsg;
                        errorMessage.style.display = 'block';
                    } finally {
                        signInBtn.disabled = false;
                        loading.style.display = 'none';
                    }
                });

                // Modify the auth state listener to be more robust
                let authStateUnsubscribe = null;
                if (authStateUnsubscribe) {
                    authStateUnsubscribe();
                }
                
                authStateUnsubscribe = auth.onAuthStateChanged((user) => {
                    console.log('Auth state changed:', user ? `User is signed in: ${user.email}` : 'No user');
                    if (user) {
                        // Only handle auth success if we're not already processing it
                        if (!loading.style.display || loading.style.display === 'none') {
                            handleAuthSuccess(user);
                        }
                    }
                });

            } catch (error) {
                console.error('Firebase initialization error:', error);
                document.getElementById('errorMessage').textContent = `Failed to initialize: ${error.message}`;
                document.getElementById('errorMessage').style.display = 'block';
            }
        }

        // Initialize when the page loads
        document.addEventListener('DOMContentLoaded', initializeFirebase);
    </script>
</body>
</html>